#!/usr/bin/env python3
"""
Scan LVGL headers and generate alias_macros.h:
  - Wrap LV_* defines in enums
  - Provide _ID macros pointing to those enums
"""

import re
import sys
import argparse
from pathlib import Path

PAT_DEFINE = re.compile(r'^\s*#\s*define\s+(LV_[A-Z0-9_]+)\s+(.+)$')

TEMPLATE_HEADER = '''\
/* AUTO-GENERATED by sanitize_lvgl_macros.py
 * Do not edit by hand.
 */
#pragma once

'''

def scan_lvgl_headers(root_dir):
    """Recursively scan all .h files under root_dir for LV_ defines."""
    entries = {}
    for path in Path(root_dir).rglob('*.h'):
        try:
            lines = path.read_text(encoding='utf-8', errors='ignore').splitlines()
        except Exception as e:
            print(f'Warning: could not read {path}: {e}')
            continue

        for line in lines:
            m = PAT_DEFINE.match(line)
            if not m:
                continue
            name, value = m.groups()
            # Skip function-like macros
            if '(' in value and not value.strip().startswith('('):
                continue
            # Strip comments
            value = value.split('//')[0].split('/*')[0].strip()
            entries[name] = value
    return entries

def generate_alias(entries):
    """
    Renders alias_macros.h with unconditional enums of the literal values
    and _ID macros pointing to them. No #ifdef guards, so IDs always exist.
    """
    lines = [TEMPLATE_HEADER]

    # For each LV_ define we found, emit
    #   enum { LV_NAME_CONST = <literal> };
    #   #define LV_NAME_ID LV_NAME_CONST
    # so that LV_NAME_ID is always valid.
    for name, value in sorted(entries.items()):
        const = f"{name}_CONST"
        idm   = f"{name}_ID"

        # Use the literal we scraped from the header, not the macro name
        lines.append(f"enum {{ {const} = {value} }};")
        lines.append(f"#define {idm} {const}")
        lines.append("")  # blank line for readability

    return "\n".join(lines)


def main():
    p = argparse.ArgumentParser(
        description='Generate alias_macros.h from LVGL headers')
    p.add_argument('--conf', '-c', required=True,
                   help='Path to LVGL source directory (e.g. lib/lvgl)')
    p.add_argument('--out', '-o', required=True,
                   help='Output path for alias_macros.h')
    args = p.parse_args()

    root_dir = Path(args.conf)
    out_path = Path(args.out)

    if not root_dir.exists() or not root_dir.is_dir():
        sys.exit(f'ERROR: not a valid directory: {root_dir}')

    entries = scan_lvgl_headers(root_dir)
    if not entries:
        sys.exit('ERROR: no LV_ defines found in LVGL headers.')

    content = generate_alias(entries)
    out_path.write_text(content, encoding='utf-8')
    print(f'âœ… Wrote {len(entries)} entries to {out_path}')

if __name__ == '__main__':
    main()
